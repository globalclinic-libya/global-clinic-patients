import React, { useState } from 'react';
import { 
  TextField, Button, Typography, Container, Box, CircularProgress, 
  Alert, Paper, AppBar, Toolbar, IconButton, LinearProgress,
  FormControl, InputLabel, Input, FormHelperText
} from '@mui/material';
import { ArrowBack, CloudUpload } from '@mui/icons-material';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

const API_BASE_URL = 'http://localhost:5000';

function SubmitCase() {
  const [medicalHistory, setMedicalHistory] = useState('');
  const [audioFile, setAudioFile] = useState(null);
  const [documentFiles, setDocumentFiles] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [uploadProgress, setUploadProgress] = useState(0);
  const navigate = useNavigate();

  const validateFiles = () => {
    const errors = [];
    
    // Validate audio file
    if (audioFile) {
      const audioExtensions = ['.mp3', '.wav', '.m4a', '.aac'];
      const audioExt = audioFile.name.toLowerCase().substring(audioFile.name.lastIndexOf('.'));
      if (!audioExtensions.includes(audioExt)) {
        errors.push('نوع الملف الصوتي غير مدعوم. الأنواع المدعومة: MP3, WAV, M4A, AAC');
      }
      if (audioFile.size > 50 * 1024 * 1024) { // 50MB
        errors.push('حجم الملف الصوتي كبير جداً (الحد الأقصى 50 ميجابايت)');
      }
    }
    
    // Validate document files
    if (documentFiles.length > 0) {
      const docExtensions = ['.pdf', '.jpg', '.jpeg', '.png', '.doc', '.docx'];
      for (let file of documentFiles) {
        const docExt = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));
        if (!docExtensions.includes(docExt)) {
          errors.push(`نوع الملف ${file.name} غير مدعوم`);
        }
        if (file.size > 50 * 1024 * 1024) { // 50MB
          errors.push(`حجم الملف ${file.name} كبير جداً (الحد الأقصى 50 ميجابايت)`);
        }
      }
    }
    
    return errors;
  };

  const handleAudioChange = (event) => {
    const file = event.target.files[0];
    setAudioFile(file);
    setError('');
  };

  const handleDocumentChange = (event) => {
    const files = Array.from(event.target.files);
    setDocumentFiles(files);
    setError('');
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    setError('');
    
    if (!medicalHistory.trim()) {
      setError('يرجى إدخال التاريخ الطبي');
      return;
    }
    
    const validationErrors = validateFiles();
    if (validationErrors.length > 0) {
      setError(validationErrors.join('. '));
      return;
    }

    setLoading(true);
    setUploadProgress(0);

    const formData = new FormData();
    formData.append('description', medicalHistory);
    formData.append('audio_file', audioFile);
    
    documentFiles.forEach((file) => {
      formData.append('document_files', file);
    });

    try {
      const token = localStorage.getItem('access_token');
      if (!token) {
        setError('انتهت جلسة تسجيل الدخول. يرجى تسجيل الدخول مرة أخرى.');
        setTimeout(() => navigate('/'), 2000);
        return;
      }

      const response = await axios.post(`${API_BASE_URL}/api/patients/cases`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
          Authorization: `Bearer ${token}`,
        },
        onUploadProgress: (progressEvent) => {
          const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          setUploadProgress(progress);
        },
      });
      
      console.log('Case submitted:', response.data);
      
      // Show success message and navigate
      alert('تم تقديم حالتك الطبية بنجاح! سيتم مراجعتها من قبل أطباء متخصصين وستحصل على التقرير قريباً.');
      navigate('/dashboard'); // navigate('/dashboard', { state: { refresh: true } }); <-- replace after finish system
      window.location.reload(); 

    } catch (error) {
      console.error('Submit case error:', error);
      
      if (error.response?.status === 401) {
        localStorage.removeItem('access_token');
        setError('انتهت جلسة تسجيل الدخول. يرجى تسجيل الدخول مرة أخرى.');
        setTimeout(() => navigate('/'), 2000);
      } else if (error.response?.data?.detail) {
        setError(error.response.data.detail);
      } else {
        setError('فشل في تقديم الحالة. يرجى المحاولة مرة أخرى.');
      }
    } finally {
      setLoading(false);
      setUploadProgress(0);
    }
  };

  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  return (
    <>
      <AppBar position="static" sx={{ mb: 4 }}>
        <Toolbar>
          <IconButton edge="start" color="inherit" onClick={() => navigate('/dashboard')}>
            <ArrowBack />
          </IconButton>
          <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
            تقديم حالة طبية جديدة
          </Typography>
        </Toolbar>
      </AppBar>

      <Container maxWidth="md">
        <Paper sx={{ p: 4 }}>
          <Typography variant="h5" sx={{ mb: 3, fontWeight: 'bold', textAlign: 'center' }}>
            تقديم حالة طبية للاستشارة
          </Typography>
          
          <Typography variant="body2" color="text.secondary" sx={{ mb: 4, textAlign: 'center' }}>
            يرجى ملء جميع البيانات المطلوبة للحصول على أفضل استشارة طبية من أطباء متخصصين
          </Typography>

          {error && (
            <Alert severity="error" sx={{ mb: 3 }}>
              {error}
            </Alert>
          )}

          {loading && uploadProgress > 0 && (
            <Box sx={{ mb: 3 }}>
              <Typography variant="body2" sx={{ mb: 1 }}>
                جاري رفع الملفات... {uploadProgress}%
              </Typography>
              <LinearProgress variant="determinate" value={uploadProgress} />
            </Box>
          )}

          <Box component="form" onSubmit={handleSubmit} noValidate>
            <TextField
              margin="normal"
              required
              fullWidth
              multiline
              rows={6}
              id="medicalHistory"
              label="التاريخ الطبي والأعراض"
              name="medicalHistory"
              value={medicalHistory}
              onChange={(e) => setMedicalHistory(e.target.value)}
              inputProps={{ dir: 'rtl' }}
              placeholder="يرجى وصف الأعراض التي تعاني منها، التاريخ الطبي، الأدوية الحالية، والفحوصات السابقة..."
              disabled={loading}
              helperText="كلما كانت المعلومات أكثر تفصيلاً، كان التشخيص أدق"
            />

            <FormControl fullWidth margin="normal" required>
              <InputLabel htmlFor="audio-upload">التسجيل الصوتي *</InputLabel>
              <Input
                id="audio-upload"
                type="file"
                accept=".mp3,.wav,.m4a,.aac"
                onChange={handleAudioChange}
                disabled={loading}
                inputProps={{ 'aria-describedby': 'audio-helper-text' }}
              />
              <FormHelperText id="audio-helper-text">
                {audioFile 
                  ? `تم اختيار: ${audioFile.name} (${formatFileSize(audioFile.size)})`
                  : 'يرجى تسجيل وصف صوتي لحالتك الطبية (MP3, WAV, M4A, AAC - حد أقصى 50 ميجابايت)'
                }
              </FormHelperText>
            </FormControl>

            <FormControl fullWidth margin="normal">
              <InputLabel htmlFor="document-upload">المستندات الطبية (اختياري)</InputLabel>
              <Input
                id="document-upload"
                type="file"
                multiple
                accept=".pdf,.jpg,.jpeg,.png,.doc,.docx"
                onChange={handleDocumentChange}
                disabled={loading}
                inputProps={{ 'aria-describedby': 'document-helper-text' }}
              />
              <FormHelperText id="document-helper-text">
                {documentFiles.length > 0 
                  ? `تم اختيار ${documentFiles.length} ملف: ${documentFiles.map(f => f.name).join(', ')}`
                  : 'تقارير طبية، أشعة، تحاليل (PDF, JPG, PNG, DOC - حد أقصى 50 ميجابايت لكل ملف)'
                }
              </FormHelperText>
            </FormControl>

            <Button
              type="submit"
              fullWidth
              variant="contained"
              size="large"
              sx={{ mt: 4, py: 2 }}
              disabled={loading || !medicalHistory.trim()}
              startIcon={loading ? <CircularProgress size={20} color="inherit" /> : <CloudUpload />}
            >
              {loading ? 'جاري تقديم الحالة...' : 'تقديم الحالة الطبية'}
            </Button>

            <Typography variant="body2" color="text.secondary" sx={{ mt: 2, textAlign: 'center' }}>
              سيتم مراجعة حالتك من قبل أطباء متخصصين وستحصل على التقرير الطبي خلال 24-48 ساعة
            </Typography>
          </Box>
        </Paper>
      </Container>
    </>
  );
}

export default SubmitCase;

